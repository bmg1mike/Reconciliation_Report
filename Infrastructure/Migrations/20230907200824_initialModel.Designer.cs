// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ReconciliationReport.Data;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ReconciliationContext))]
    [Migration("20230907200824_initialModel")]
    partial class initialModel
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ReconciliationReport.Entities.InwardReport", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Amount")
                        .HasColumnType("text");

                    b.Property<string>("BatchId")
                        .HasColumnType("text");

                    b.Property<string>("CHANNEL")
                        .HasColumnType("text");

                    b.Property<string>("CoreBankingReference")
                        .HasColumnType("text");

                    b.Property<string>("DESTINATION_ACCOUNT_NAME")
                        .HasColumnType("text");

                    b.Property<string>("DESTINATION_ACCOUNT_NO")
                        .HasColumnType("text");

                    b.Property<string>("DESTINATION_INSTITUTION")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EntryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("IsCredited")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsProcessed")
                        .HasColumnType("boolean");

                    b.Property<string>("LAST_12_DIGITS_OF_SESSION_ID")
                        .HasColumnType("text");

                    b.Property<string>("NARRATION")
                        .HasColumnType("text");

                    b.Property<string>("ORIGINATOR")
                        .HasColumnType("text");

                    b.Property<string>("ORIGINATOR_INSTITUTION")
                        .HasColumnType("text");

                    b.Property<string>("PAYMENT_REFERENCE")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ProcessedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RESPONSE")
                        .HasColumnType("text");

                    b.Property<string>("SESSION_ID")
                        .HasColumnType("text");

                    b.Property<string>("TRANSACTION_TIME")
                        .HasColumnType("text");

                    b.Property<string>("TRANSACTION_TYPE")
                        .HasColumnType("text");

                    b.Property<bool?>("TransactionExist")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("InwardReports");
                });

            modelBuilder.Entity("ReconciliationReport.Entities.NipInwardBatch", b =>
                {
                    b.Property<string>("BatchId")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FileName")
                        .HasColumnType("text");

                    b.HasKey("BatchId");

                    b.ToTable("NipInwardBatches");
                });

            modelBuilder.Entity("ReconciliationReport.Entities.NipOutwardBatch", b =>
                {
                    b.Property<string>("BatchId")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FileName")
                        .HasColumnType("text");

                    b.HasKey("BatchId");

                    b.ToTable("NipOutwardBatches");
                });

            modelBuilder.Entity("ReconciliationReport.Entities.OutwardReport", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Amount")
                        .HasColumnType("text");

                    b.Property<string>("BatchId")
                        .HasColumnType("text");

                    b.Property<string>("CHANNEL")
                        .HasColumnType("text");

                    b.Property<string>("CoreBankingReference")
                        .HasColumnType("text");

                    b.Property<string>("DESTINATION_ACCOUNT_NAME")
                        .HasColumnType("text");

                    b.Property<string>("DESTINATION_ACCOUNT_NO")
                        .HasColumnType("text");

                    b.Property<string>("DESTINATION_INSTITUTION")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EntryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("IsDebited")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsProcessed")
                        .HasColumnType("boolean");

                    b.Property<string>("LAST_12_DIGITS_OF_SESSION_ID")
                        .HasColumnType("text");

                    b.Property<string>("NARRATION")
                        .HasColumnType("text");

                    b.Property<string>("ORIGINATOR")
                        .HasColumnType("text");

                    b.Property<string>("ORIGINATOR_INSTITUTION")
                        .HasColumnType("text");

                    b.Property<string>("PAYMENT_REFERENCE")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ProcessedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RESPONSE")
                        .HasColumnType("text");

                    b.Property<string>("SESSION_ID")
                        .HasColumnType("text");

                    b.Property<string>("TRANSACTION_TIME")
                        .HasColumnType("text");

                    b.Property<string>("TRANSACTION_TYPE")
                        .HasColumnType("text");

                    b.Property<bool?>("TransactionExist")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("OutwardReports");
                });
#pragma warning restore 612, 618
        }
    }
}
